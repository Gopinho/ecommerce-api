generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(uuid())
  email     String         @unique
  password  String
  name      String
  role      Role           @default(CLIENT)
  
  createdAt DateTime       @default(now())
  orders    Order[]
  cartItems CartItem[]
  refreshTokens RefreshToken[]
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?
  wishlist Product[] @relation("Wishlist")
  auditLogs AuditLog[]
  passwordResetTokens PasswordResetToken[]
  reviews Review[]
  licenses License[]

  groupId   String?
  group     UserGroup?     @relation(fields: [groupId], references: [id])
  permissions Permission[] @relation("UserPermissions")

}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime @default(now())
  orderItems  OrderItem[]
  cartItems CartItem[]
  wishedBy User[] @relation("Wishlist")
  reviews Review[]
  licenses License[]
  sold Int @default(0)
  
  // Fashion-specific fields
  brand       String?
  material    String?
  care        String?
  style       String?
  occasion    String?
  season      String?
  gender      String?
  tags        String @default("[]") // JSON string for SQLite
  
  // Product variants for fashion (sizes, colors, etc.)
  variants    ProductVariant[]
  images      ProductImage[]
  productCollections ProductCollection[]
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
  sizeGuides SizeGuide[]
  
  // Fashion category specific fields
  parentId String?
  parent   Category? @relation("CategoryTree", fields: [parentId], references: [id])
  children Category[] @relation("CategoryTree")
  
  // Category metadata
  description String?
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
}

model Order {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime  @default(now())
  items     OrderItem[]
  status    OrderStatus @default(PENDING)
  couponId String? 
  coupon   Coupon? @relation(fields: [couponId], references: [id])
  licenses License[]
  total  Float

}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  variantId String?  // Optional: specific variant ordered
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  quantity  Int
  price     Float
  size      String?  // Snapshot of size at time of order
  color     String?  // Snapshot of color at time of order
}

enum Role {
  ADMIN
  CLIENT
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}

model RefreshToken {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  token      String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  revoked    Boolean  @default(false)
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  variantId String?  // Specific variant in cart
  quantity  Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])
  
  @@unique([userId, productId, variantId])
}

model AuditLog {
  id          String   @id @default(uuid())
  action      String
  entity      String
  entityId    String
  userId      String
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // apenas uma review por utilizador por produto
}

model Coupon {
  id            String   @id @default(uuid())
  code          String   @unique
  description   String?
  discountType  String   // "percent" ou "fixed"
  amount        Float
  expiresAt     DateTime
  maxUses       Int?
  minOrderValue Float?
  usedCount     Int      @default(0)
  createdAt     DateTime @default(now())

  orders        Order[]  // Encomendas que usaram este cupom
}

model License {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  key         String   @unique
  userId      String
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  status      String   @default("active") // active, expired, revoked

  order       Order    @relation(fields: [orderId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Permission {
  id    String   @id @default(uuid())
  name  String   @unique
  users User[]   @relation("UserPermissions")
}

model UserGroup {
  id    String   @id @default(uuid())
  name  String   @unique
  users User[]
}

// Fashion-specific models

model ProductVariant {
  id        String   @id @default(uuid())
  productId String
  size      String
  color     String
  colorHex  String?  // Hex color code for visual display
  stock     Int
  price     Float?   // Override product price if different for variant
  sku       String?  // Unique SKU for this variant
  weight    Float?   // For shipping calculations
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems  CartItem[]
  
  @@unique([productId, size, color])
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  url       String
  altText   String?
  sortOrder Int      @default(0)
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model SizeGuide {
  id         String   @id @default(uuid())
  categoryId String
  name       String
  sizes      String   // JSON string for SQLite
  unit       String   @default("cm") // cm, inches
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([categoryId, name])
}

model Brand {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model Collection {
  id          String   @id @default(uuid())
  name        String
  description String?
  season      String?  // Spring/Summer, Fall/Winter
  year        Int?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  productCollections ProductCollection[]
}

// Join table for product collections (many-to-many)
model ProductCollection {
  id           String     @id @default(uuid())
  productId    String
  collectionId String
  
  product      Product    @relation(fields: [productId], references: [id])
  collection   Collection @relation(fields: [collectionId], references: [id])
  
  @@unique([productId, collectionId])
}