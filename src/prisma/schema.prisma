generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(uuid())
  email     String         @unique
  password  String
  name      String
  role      Role           @default(CLIENT)
  
  createdAt DateTime       @default(now())
  orders    Order[]
  cartItems CartItem[]
  refreshTokens RefreshToken[]
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?
  wishlist Product[] @relation("Wishlist")
  auditLogs AuditLog[]
  passwordResetTokens PasswordResetToken[]
  reviews Review[]
  licenses License[]

  groupId   String?
  group     UserGroup?     @relation(fields: [groupId], references: [id])
  permissions Permission[] @relation("UserPermissions")

}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime @default(now())
  orderItems  OrderItem[]
  cartItems CartItem[]
  wishedBy User[] @relation("Wishlist")
  reviews Review[]
  licenses License[]
  sold Int @default(0)
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Order {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime  @default(now())
  items     OrderItem[]
  status    OrderStatus @default(PENDING)
  couponId String? 
  coupon   Coupon? @relation(fields: [couponId], references: [id])
  licenses License[]
  total  Float

}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

enum Role {
  ADMIN
  CLIENT
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}

model RefreshToken {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  token      String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  revoked    Boolean  @default(false)
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model AuditLog {
  id          String   @id @default(uuid())
  action      String
  entity      String
  entityId    String
  userId      String
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // apenas uma review por utilizador por produto
}

model Coupon {
  id            String   @id @default(uuid())
  code          String   @unique
  description   String?
  discountType  String   // "percent" ou "fixed"
  amount        Float
  expiresAt     DateTime
  maxUses       Int?
  minOrderValue Float?
  usedCount     Int      @default(0)
  createdAt     DateTime @default(now())

  orders        Order[]  // Encomendas que usaram este cupom
}

model License {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  key         String   @unique
  userId      String
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  status      String   @default("active") // active, expired, revoked

  order       Order    @relation(fields: [orderId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Permission {
  id    String   @id @default(uuid())
  name  String   @unique
  users User[]   @relation("UserPermissions")
}

model UserGroup {
  id    String   @id @default(uuid())
  name  String   @unique
  users User[]
}
