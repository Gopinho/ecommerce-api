generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(cuid()) @db.VarChar(25)
  email     String         @unique @db.VarChar(191)
  password  String         @db.VarChar(255)
  name      String         @db.VarChar(191)
  role      Role           @default(CLIENT)
  
  createdAt DateTime       @default(now())
  orders    Order[]
  cartItems CartItem[]
  refreshTokens RefreshToken[]
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String? @db.VarChar(255)
  wishlist Product[] @relation("Wishlist")
  auditLogs AuditLog[]
  passwordResetTokens PasswordResetToken[]
  reviews Review[]
  licenses License[]

  groupId   String?        @db.VarChar(25)
  group     UserGroup?     @relation(fields: [groupId], references: [id])
  permissions Permission[] @relation("UserPermissions")
  supplierOrders SupplierOrder[]
  
  // Newsletter relations
  newsletterCampaigns NewsletterCampaign[]
  newsletterTemplates NewsletterTemplate[]
}

model Product {
  id          String   @id @default(cuid()) @db.VarChar(25)
  name        String   @db.VarChar(191)
  description String   @db.Text
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0) // Stock físico real disponível
  fictionalStock Int   @default(0) // Stock fictício/planejado para a coleção
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String   @db.VarChar(25)
  createdAt   DateTime @default(now())
  orderItems  OrderItem[]
  cartItems CartItem[]
  wishedBy User[] @relation("Wishlist")
  reviews Review[]
  licenses License[]
  sold Int @default(0)
  
  // Fashion-specific fields
  material    String?  @db.VarChar(191)
  care        String?  @db.Text
  style       String?  @db.VarChar(191)
  occasion    String?  @db.VarChar(191)
  season      String?  @db.VarChar(191)
  gender      String?  @db.VarChar(191)
  tags        Json
  
  // Product variants for fashion (sizes, colors, etc.)
  variants    ProductVariant[]
  images      ProductImage[]
  productCollections ProductCollection[]
  supplierOrderItems SupplierOrderItem[]
}

model Category {
  id       String    @id @default(cuid()) @db.VarChar(25)
  name     String    @unique @db.VarChar(191)
  products Product[]
  sizeGuides SizeGuide[]
  
  // Fashion category specific fields
  parentId String?   @db.VarChar(25)
  parent   Category? @relation("CategoryTree", fields: [parentId], references: [id])
  children Category[] @relation("CategoryTree")
  
  // Category metadata
  description String? @db.Text
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
}

model Order {
  id        String    @id @default(cuid()) @db.VarChar(25)
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.VarChar(25)
  createdAt DateTime  @default(now())
  items     OrderItem[]
  status    OrderStatus @default(PENDING)
  couponId String?    @db.VarChar(25)
  coupon   Coupon?    @relation(fields: [couponId], references: [id])
  licenses License[]
  total  Decimal     @db.Decimal(10, 2)
}

model OrderItem {
  id        String   @id @default(cuid()) @db.VarChar(25)
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @db.VarChar(25)
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.VarChar(25)
  variantId String?  @db.VarChar(25) // Optional: specific variant ordered
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  size      String?  @db.VarChar(50) // Snapshot of size at time of order
  color     String?  @db.VarChar(50) // Snapshot of color at time of order
}

enum Role {
  ADMIN
  CLIENT
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}

model RefreshToken {
  id         String   @id @default(cuid()) @db.VarChar(25)
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.VarChar(25)
  token      String   @unique @db.VarChar(255)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  revoked    Boolean  @default(false)
}

model CartItem {
  id        String   @id @default(cuid()) @db.VarChar(25)
  userId    String   @db.VarChar(25)
  productId String   @db.VarChar(25)
  variantId String?  @db.VarChar(25) // Specific variant in cart
  quantity  Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])
  
  @@unique([userId, productId, variantId])
}

model AuditLog {
  id          String   @id @default(cuid()) @db.VarChar(25)
  action      String   @db.VarChar(50)
  entity      String   @db.VarChar(50)
  entityId    String   @db.VarChar(25)
  userId      String   @db.VarChar(25)
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid()) @db.VarChar(25)
  token     String   @unique @db.VarChar(255)
  userId    String   @db.VarChar(25)
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(cuid()) @db.VarChar(25)
  userId    String   @db.VarChar(25)
  productId String   @db.VarChar(25)
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // apenas uma review por utilizador por produto
}

model Coupon {
  id            String   @id @default(cuid()) @db.VarChar(25)
  code          String   @unique @db.VarChar(50)
  description   String?  @db.Text
  discountType  String   @db.VarChar(20) // "percent" ou "fixed"
  amount        Decimal  @db.Decimal(10, 2)
  expiresAt     DateTime
  maxUses       Int?
  minOrderValue Decimal? @db.Decimal(10, 2)
  usedCount     Int      @default(0)
  createdAt     DateTime @default(now())

  orders        Order[]  // Encomendas que usaram este cupom
}

model License {
  id          String   @id @default(cuid()) @db.VarChar(25)
  orderId     String   @db.VarChar(25)
  productId   String   @db.VarChar(25)
  key         String   @unique @db.VarChar(255)
  userId      String   @db.VarChar(25)
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  status      String   @default("active") @db.VarChar(20) // active, expired, revoked

  order       Order    @relation(fields: [orderId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Permission {
  id    String   @id @default(cuid()) @db.VarChar(25)
  name  String   @unique @db.VarChar(191)
  users User[]   @relation("UserPermissions")
}

model UserGroup {
  id    String   @id @default(cuid()) @db.VarChar(25)
  name  String   @unique @db.VarChar(191)
  users User[]
}

// Fashion-specific models

model ProductVariant {
  id        String   @id @default(cuid()) @db.VarChar(25)
  productId String   @db.VarChar(25)
  size      String   @db.VarChar(10)
  color     String   @db.VarChar(50)
  colorHex  String?  @db.VarChar(7) // Hex color code for visual display
  stock     Int
  price     Decimal? @db.Decimal(10, 2) // Override product price if different for variant
  sku       String?  @db.VarChar(50) // Unique SKU for this variant
  weight    Decimal? @db.Decimal(8, 2) // For shipping calculations
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems  CartItem[]
  
  @@unique([productId, size, color])
  @@index([productId])
  @@index([size])
  @@index([color])
}

model ProductImage {
  id        String   @id @default(cuid()) @db.VarChar(25)
  productId String   @db.VarChar(25)
  url       String   @db.VarChar(500)
  altText   String?  @db.VarChar(255)
  sortOrder Int      @default(0)
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
  @@index([isMain])
}

model SizeGuide {
  id         String   @id @default(cuid()) @db.VarChar(25)
  categoryId String   @db.VarChar(25)
  name       String   @db.VarChar(191)
  sizes      Json     // {XS: {bust: 80, waist: 60, hip: 85}, S: {...}, etc}
  unit       String   @default("cm") @db.VarChar(10) // cm, inches
  notes      String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([categoryId, name])
  @@index([categoryId])
}

model Collection {
  id          String   @id @default(cuid()) @db.VarChar(25)
  name        String   @unique @db.VarChar(191) // Nome da coleção/linha
  description String?  @db.Text
  season      String?  @db.VarChar(50) // Spring/Summer, Fall/Winter, etc.
  year        Int?
  launchDate  DateTime? // Data de lançamento
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false) // Coleção em destaque
  coverImage  String?  @db.VarChar(500) // Imagem de capa da coleção
  slug        String?  @unique @db.VarChar(191) // URL amigável
  sortOrder   Int      @default(0) // Ordem de exibição
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  productCollections ProductCollection[]
}

// Join table for product collections (many-to-many)
model ProductCollection {
  id           String     @id @default(cuid()) @db.VarChar(25)
  productId    String     @db.VarChar(25)
  collectionId String     @db.VarChar(25)
  
  product      Product    @relation(fields: [productId], references: [id])
  collection   Collection @relation(fields: [collectionId], references: [id])
  
  @@unique([productId, collectionId])
  @@index([productId])
  @@index([collectionId])
}

// Supplier management models
model Supplier {
  id            String   @id @default(cuid()) @db.VarChar(25)
  name          String   @db.VarChar(191)
  contactName   String?  @db.VarChar(191) // Nome do contacto principal
  email         String?  @db.VarChar(191)
  phone         String?  @db.VarChar(50)
  address       String?  @db.Text
  city          String?  @db.VarChar(100)
  country       String?  @db.VarChar(100)
  postalCode    String?  @db.VarChar(20)
  taxNumber     String?  @db.VarChar(50) // NIF/VAT number
  website       String?  @db.VarChar(255)
  notes         String?  @db.Text
  isActive      Boolean  @default(true)
  paymentTerms  String?  @db.VarChar(100) // Ex: "30 dias", "À vista"
  currency      String   @default("EUR") @db.VarChar(3)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relacionamentos
  supplierOrders SupplierOrder[]
  
  @@index([name])
  @@index([isActive])
}

enum SupplierOrderStatus {
  PENDENTE    // Encomenda criada, aguardando envio
  ENVIADA     // Encomenda enviada ao fornecedor
  RECEBIDA    // Encomenda recebida do fornecedor
  CANCELADA   // Encomenda cancelada
}

model SupplierOrder {
  id              String              @id @default(cuid()) @db.VarChar(25)
  orderNumber     String              @unique @db.VarChar(50) // Número único da encomenda
  supplierId      String              @db.VarChar(25)
  status          SupplierOrderStatus @default(PENDENTE)
  orderDate       DateTime            @default(now())
  expectedDate    DateTime?           // Data esperada de entrega
  receivedDate    DateTime?           // Data real de recepção
  totalAmount     Decimal             @db.Decimal(10, 2) // Total em €
  currency        String              @default("EUR") @db.VarChar(3)
  notes           String?             @db.Text
  invoiceNumber   String?             @db.VarChar(100) // Número da factura do fornecedor
  createdById     String              @db.VarChar(25) // User que criou a encomenda
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relacionamentos
  supplier        Supplier            @relation(fields: [supplierId], references: [id])
  createdBy       User                @relation(fields: [createdById], references: [id])
  items           SupplierOrderItem[]
  
  @@index([supplierId])
  @@index([status])
  @@index([orderDate])
  @@index([createdById])
}

model SupplierOrderItem {
  id                String        @id @default(cuid()) @db.VarChar(25)
  supplierOrderId   String        @db.VarChar(25)
  productId         String?       @db.VarChar(25) // Produto existente (opcional)
  productName       String        @db.VarChar(191) // Nome do produto
  description       String?       @db.Text
  quantity          Int
  unitPrice         Decimal       @db.Decimal(10, 2)
  totalPrice        Decimal       @db.Decimal(10, 2)
  sku               String?       @db.VarChar(100) // SKU do fornecedor
  receivedQuantity  Int           @default(0) // Quantidade recebida
  
  // Relacionamentos
  supplierOrder     SupplierOrder @relation(fields: [supplierOrderId], references: [id], onDelete: Cascade)
  product           Product?      @relation(fields: [productId], references: [id])
  
  @@index([supplierOrderId])
  @@index([productId])
}

// === NEWSLETTER SYSTEM ===
model NewsletterSubscriber {
  id            String   @id @default(cuid()) @db.VarChar(25)
  email         String   @unique @db.VarChar(255)
  firstName     String?  @db.VarChar(100)
  lastName      String?  @db.VarChar(100)
  isActive      Boolean  @default(true)
  preferences   Json?    // Newsletter preferences (fashion, sales, new arrivals, etc.)
  source        String?  @db.VarChar(50) // Where they subscribed (website, popup, checkout, etc.)
  subscribedAt  DateTime @default(now())
  unsubscribedAt DateTime?
  confirmedAt   DateTime? // Double opt-in confirmation
  
  // Relations
  campaigns     NewsletterCampaignSent[]
  tags          NewsletterSubscriberTag[]
  
  @@index([email])
  @@index([isActive])
  @@index([subscribedAt])
  @@map("newsletter_subscribers")
}

model NewsletterTag {
  id         String @id @default(cuid()) @db.VarChar(25)
  name       String @unique @db.VarChar(50)
  color      String? @db.VarChar(7) // Hex color for UI
  createdAt  DateTime @default(now())
  
  // Relations
  subscribers NewsletterSubscriberTag[]
  campaigns   NewsletterCampaignTag[]
  
  @@map("newsletter_tags")
}

model NewsletterSubscriberTag {
  id           String @id @default(cuid()) @db.VarChar(25)
  subscriberId String @db.VarChar(25)
  tagId        String @db.VarChar(25)
  
  // Relations
  subscriber   NewsletterSubscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  tag          NewsletterTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([subscriberId, tagId])
  @@map("newsletter_subscriber_tags")
}

model NewsletterCampaign {
  id           String   @id @default(cuid()) @db.VarChar(25)
  name         String   @db.VarChar(200)
  subject      String   @db.VarChar(255)
  content      String   @db.Text // HTML content
  plainText    String?  @db.Text // Plain text version
  status       NewsletterCampaignStatus @default(DRAFT)
  type         NewsletterType @default(GENERAL)
  scheduledFor DateTime?
  sentAt       DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String   @db.VarChar(25) // Admin user ID
  
  // Statistics
  totalSent    Int @default(0)
  opened       Int @default(0)
  clicked      Int @default(0)
  bounced      Int @default(0)
  unsubscribed Int @default(0)
  
  // Relations
  creator      User     @relation(fields: [createdBy], references: [id])
  sent         NewsletterCampaignSent[]
  tags         NewsletterCampaignTag[]
  
  @@index([status])
  @@index([scheduledFor])
  @@map("newsletter_campaigns")
}

model NewsletterCampaignTag {
  id         String @id @default(cuid()) @db.VarChar(25)
  campaignId String @db.VarChar(25)
  tagId      String @db.VarChar(25)
  
  // Relations
  campaign   NewsletterCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  tag        NewsletterTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, tagId])
  @@map("newsletter_campaign_tags")
}
model NewsletterCampaignSent {
  id           String   @id @default(cuid()) @db.VarChar(25)
  campaignId   String   @db.VarChar(25)
  subscriberId String   @db.VarChar(25)
  sentAt       DateTime @default(now())
  openedAt     DateTime?
  clickedAt    DateTime?
  bouncedAt    DateTime?
  unsubscribedAt DateTime?
  
  // Relations
  campaign     NewsletterCampaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  subscriber   NewsletterSubscriber  @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, subscriberId])
  @@index([sentAt])
  @@index([openedAt])
  @@map("newsletter_campaign_sent")
}

model NewsletterTemplate {
  id          String   @id @default(cuid()) @db.VarChar(25)
  name        String   @db.VarChar(200)
  description String?  @db.VarChar(500)
  content     String   @db.Text // HTML template
  variables   Json?    // Available template variables
  type        NewsletterType @default(GENERAL)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @db.VarChar(25)
  
  // Relations
  creator     User     @relation(fields: [createdBy], references: [id])
  
  @@index([type])
  @@index([isActive])
  @@map("newsletter_templates")
}

enum NewsletterCampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}

enum NewsletterType {
  GENERAL
  WELCOME
  PROMOTIONAL
  NEW_ARRIVALS
  ABANDONED_CART
  WIN_BACK
  SEASONAL
}
